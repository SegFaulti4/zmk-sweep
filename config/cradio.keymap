/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_SCRL_VAL 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";
        combo_spc {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp SPACE>;
            layers = <0>;
        };
        combo_tab {
            timeout-ms = <100>;
            key-positions = <21 22>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_bspc {
            timeout-ms = <100>;
            key-positions = <7 8>;
            bindings = <&kp BSPC>;
            layers = <0>;
        };
        combo_ent {
            timeout-ms = <100>;
            key-positions = <27 28>;
            bindings = <&kp ENTER>;
            layers = <0>;
        };
    };

    behaviors {
        lmt: left_mod_tap {
            display-name = "Left-Mod-Tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };
        rmt: right_mod_tap {
            display-name = "Right-Mod-Tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };

        llt: left_layer_tap {
            display-name = "Left-Layer-Tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };
        rlt: right_layer_tap {
            display-name = "Right-Layer-Tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
        };

        tt1: tap_toggle_layer_1 {
            display-name = "Tap-Toggle-Layer-1";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 1>;
            tapping-term-ms = <200>;
        };
        tt2: tap_toggle_layer_2 {
            display-name = "Tap-Toggle-Layer-2";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&tog 2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
           0 {
            bindings = <
                &kp Q  &kp W        &kp E         &lmt LALT R   &kp T          &kp Y   &rmt RALT U   &kp I         &kp O        &kp P
                &kp A  &lmt LGUI S  &lmt LSHFT D  &lmt LCTRL F  &kp G          &kp H   &rmt RCTRL J  &rmt RSHFT K  &rmt RGUI L  &kp SEMI
                &kp Z  &kp X        &kp C         &llt 4 V      &kp B          &kp N   &rlt 5 M      &kp COMMA     &kp DOT      &kp SLASH
                                                    &kp ESC      &tt1          &tt2    &kp CAPS
            >;
        };
        1 {
            bindings = <
                &none      &msc SCRL_LEFT  &msc SCRL_RIGHT  &kp LALT   &none              &none  &kp N1  &kp N2  &kp N3  &none
                &kp LC(A)  &kp LGUI        &kp LSHFT        &kp LCTRL  &none              &none  &kp N4  &kp N5  &kp N6  &none
                &kp LC(Z)  &kp LC(X)       &kp LC(C)        &kp LC(V)  &kp LC(B)          &none  &kp N7  &kp N8  &kp N9  &kp N0
                                                               &none      &trans          &mo 3      &none
            >;
        };
        2 {
            bindings = <
                &none    &msc SCRL_DOWN  &kp UP     &msc SCRL_UP  &none          &none   &kp RALT   &msc SCRL_LEFT  &msc SCRL_RIGHT  &none
                &none    &kp LEFT        &kp DOWN   &kp RIGHT     &none          &none   &kp RCTRL  &kp RSHFT       &kp RGUI         &none
                &kp END  &kp PG_DN       &kp PG_UP  &kp HOME      &none          &none   &none      &none           &none            &none
                                                       &none      &mo 3          &trans      &none
            >;
        };
        3 {
            bindings = <
                &none   &kp F1  &kp F2  &kp F3  &bt BT_SEL 0          &bt BT_SEL 3  &kp F10  &kp F11   &kp F12    &kp PSCRN
                &tog 6  &kp F4  &kp F5  &kp F6  &bt BT_SEL 1          &bt BT_SEL 4  &kp INS  &kp HOME  &kp PG_UP  &kp K_VOL_UP
                &none   &kp F7  &kp F8  &kp F9  &bt BT_SEL 2          &bt BT_CLR    &kp DEL  &kp END   &kp PG_DN  &kp K_VOL_DN
                                    &out OUT_USB      &trans          &trans      &out OUT_BLE
            >;
        };
        4 {
            bindings = <
                &none  &none  &none  &none   &none          &none  &kp RS(MINUS)  &kp RS(SQT)  &kp RS(EQUAL)  &kp RS(BSLH)
                &none  &none  &none  &none   &none          &none  &kp MINUS      &kp SQT      &kp EQUAL      &kp BSLH
                &none  &none  &none  &trans  &none          &none  &kp RS(LBKT)   &kp LBKT     &kp RBKT       &kp RS(RBKT)
                                  &none      &none          &none      &none
            >;
        };
        5 {
            bindings = <
                &kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &none          &none  &none   &none  &none  &none
                &kp GRAVE      &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &none          &none  &none   &none  &none  &none
                &kp LS(N0)     &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &none          &none  &trans  &none  &none  &none
                                                        &none      &none          &none      &none
            >;
        };
        6 {
            bindings = <
                &kp TAB    &kp Q  &kp W  &kp E  &kp R          &kp T  &kp Y  &kp U  &kp I  &kp O
                &kp LSHFT  &kp A  &kp S  &kp D  &kp F          &kp G  &kp H  &kp J  &kp K  &kp L
                &kp LCTRL  &kp Z  &kp X  &kp C  &kp V          &kp B  &kp N  &kp M  &kp P  &kp BSPC
                              &kp LALT      &kp SPACE          &kp LGUI      &tog 6
            >;
        };
    };
};